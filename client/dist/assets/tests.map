{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","client/tests/adapters/application.jshint.js","client/tests/app.jshint.js","client/tests/authenticators/devise.jshint.js","client/tests/authorizers/devise.jshint.js","client/tests/controllers/application.jshint.js","client/tests/controllers/index.jshint.js","client/tests/controllers/tickets/edit.jshint.js","client/tests/controllers/tickets/index.jshint.js","client/tests/controllers/tickets/new.jshint.js","client/tests/controllers/tickets/show.jshint.js","client/tests/controllers/users.jshint.js","client/tests/controllers/users/edit.jshint.js","client/tests/controllers/users/index.jshint.js","client/tests/controllers/users/new.jshint.js","client/tests/controllers/users/show.jshint.js","client/tests/controllers/users/user.jshint.js","client/tests/helpers/destroy-app.js","client/tests/helpers/destroy-app.jshint.js","client/tests/helpers/ember-simple-auth.js","client/tests/helpers/module-for-acceptance.js","client/tests/helpers/module-for-acceptance.jshint.js","client/tests/helpers/register-select-helper.js","client/tests/helpers/resolver.js","client/tests/helpers/resolver.jshint.js","client/tests/helpers/start-app.js","client/tests/helpers/start-app.jshint.js","client/tests/helpers/status-badge.jshint.js","client/tests/helpers/ticket-actions.jshint.js","client/tests/helpers/validate-properties.js","client/tests/integration/pods/components/add-ticket/component-test.js","client/tests/integration/pods/components/add-ticket/component-test.jshint.js","client/tests/integration/pods/components/display-tickets/component-test.js","client/tests/integration/pods/components/display-tickets/component-test.jshint.js","client/tests/integration/pods/components/display-tickets/items/component-test.js","client/tests/integration/pods/components/display-tickets/items/component-test.jshint.js","client/tests/integration/pods/components/login-form/component-test.js","client/tests/integration/pods/components/login-form/component-test.jshint.js","client/tests/integration/pods/components/status-field/component-test.js","client/tests/integration/pods/components/status-field/component-test.jshint.js","client/tests/integration/pods/components/user-profile/component-test.js","client/tests/integration/pods/components/user-profile/component-test.jshint.js","client/tests/integration/pods/components/user-row/component-test.js","client/tests/integration/pods/components/user-row/component-test.jshint.js","client/tests/integration/pods/components/user-select/component-test.js","client/tests/integration/pods/components/user-select/component-test.jshint.js","client/tests/mixins/set-role.jshint.js","client/tests/mixins/validation.jshint.js","client/tests/models/assignee.jshint.js","client/tests/models/assignor.jshint.js","client/tests/models/reporter.jshint.js","client/tests/models/ticket.jshint.js","client/tests/models/user.jshint.js","client/tests/pods/components/add-ticket/component.jshint.js","client/tests/pods/components/display-tickets/component.jshint.js","client/tests/pods/components/display-tickets/items/component.jshint.js","client/tests/pods/components/login-form/component.jshint.js","client/tests/pods/components/user-profile/component.jshint.js","client/tests/pods/components/user-row/component.jshint.js","client/tests/pods/components/user-select/component.jshint.js","client/tests/resolver.jshint.js","client/tests/router.jshint.js","client/tests/routes/admin.jshint.js","client/tests/routes/application.jshint.js","client/tests/routes/index.jshint.js","client/tests/routes/login.jshint.js","client/tests/routes/tickets.jshint.js","client/tests/routes/tickets/edit.jshint.js","client/tests/routes/tickets/index.jshint.js","client/tests/routes/tickets/new.jshint.js","client/tests/routes/tickets/show.jshint.js","client/tests/routes/users.jshint.js","client/tests/routes/users/edit.jshint.js","client/tests/routes/users/index.jshint.js","client/tests/routes/users/new.jshint.js","client/tests/routes/users/show.jshint.js","client/tests/routes/users/user.jshint.js","client/tests/serializers/application.jshint.js","client/tests/services/ajax.jshint.js","client/tests/services/session-account.jshint.js","client/tests/test-helper.js","client/tests/test-helper.jshint.js","client/tests/unit/adapters/application-test.js","client/tests/unit/adapters/application-test.jshint.js","client/tests/unit/mixins/set-role-test.js","client/tests/unit/mixins/set-role-test.jshint.js","client/tests/unit/models/ticket-test.js","client/tests/unit/models/ticket-test.jshint.js","client/tests/unit/models/user-test.js","client/tests/unit/models/user-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('client/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('client/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('client/tests/authenticators/devise.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authenticators/devise.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/devise.js should pass jshint.');\n  });\n});","define('client/tests/authorizers/devise.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authorizers/devise.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/devise.js should pass jshint.');\n  });\n});","define('client/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('client/tests/controllers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass jshint.');\n  });\n});","define('client/tests/controllers/tickets/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tickets/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tickets/edit.js should pass jshint.');\n  });\n});","define('client/tests/controllers/tickets/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tickets/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tickets/index.js should pass jshint.');\n  });\n});","define('client/tests/controllers/tickets/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tickets/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tickets/new.js should pass jshint.');\n  });\n});","define('client/tests/controllers/tickets/show.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tickets/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tickets/show.js should pass jshint.');\n  });\n});","define('client/tests/controllers/users.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/users.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/users.js should pass jshint.');\n  });\n});","define('client/tests/controllers/users/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/users/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/users/edit.js should pass jshint.');\n  });\n});","define('client/tests/controllers/users/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/users/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/users/index.js should pass jshint.');\n  });\n});","define('client/tests/controllers/users/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/users/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/users/new.js should pass jshint.');\n  });\n});","define('client/tests/controllers/users/show.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/users/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/users/show.js should pass jshint.');\n  });\n});","define('client/tests/controllers/users/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/users/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/users/user.js should pass jshint.');\n  });\n});","define('client/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('client/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('client/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'client/tests/helpers/start-app', 'client/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _clientTestsHelpersStartApp, _clientTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _clientTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _clientTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('client/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('client/tests/helpers/register-select-helper', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('select', function (app, selector) {\n      for (var _len = arguments.length, texts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        texts[_key - 2] = arguments[_key];\n      }\n\n      var $options = app.testHelpers.findWithAssert(selector + ' option');\n\n      $options.each(function () {\n        var _this = this;\n\n        var $option = _ember['default'].$(this);\n\n        _ember['default'].run(function () {\n          _this.selected = texts.some(function (text) {\n            return $option.is(':contains(\\'' + text + '\\')');\n          });\n          $option.trigger('change');\n        });\n      });\n\n      return app.testHelpers.wait();\n    });\n  };\n});","define('client/tests/helpers/resolver', ['exports', 'client/resolver', 'client/config/environment'], function (exports, _clientResolver, _clientConfigEnvironment) {\n\n  var resolver = _clientResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _clientConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _clientConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('client/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('client/tests/helpers/start-app', ['exports', 'ember', 'client/app', 'client/config/environment'], function (exports, _ember, _clientApp, _clientConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _clientConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _clientApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('client/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('client/tests/helpers/status-badge.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/status-badge.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/status-badge.js should pass jshint.');\n  });\n});","define('client/tests/helpers/ticket-actions.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/ticket-actions.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/ticket-actions.js should pass jshint.');\n  });\n});","define('client/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('client/tests/integration/pods/components/add-ticket/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('add-ticket', 'Integration | Component | add ticket', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'add-ticket', ['loc', [null, [1, 0], [1, 14]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'Add New Tickets');\n  });\n});","define('client/tests/integration/pods/components/add-ticket/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/add-ticket/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/add-ticket/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/display-tickets/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('display-tickets', 'Integration | Component | display tickets', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    var ticketData = [_ember['default'].Object.create({ 'title': 'centralized', 'discription': 'trending algorithm', 'status': 'open', 'reporter': 'Grant' }), _ember['default'].Object.create({ 'title': 'Decentralized', 'discription': 'Advanced upward-trending algorithm', 'status': 'open', 'reporter': 'Benton Grant' })];\n\n    this.set('model', ticketData);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 33\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'display-tickets', [], ['tickets', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [1, 26], [1, 31]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 33]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var tables = this.$('table');\n    var spans = this.$('span');\n\n    assert.equal(spans.hasClass('label'), true);\n    assert.equal(tables.hasClass('table-bordered'), true);\n  });\n});","define('client/tests/integration/pods/components/display-tickets/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/display-tickets/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/display-tickets/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/display-tickets/items/component-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('display-tickets/items', 'Integration | Component | display tickets/items', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    var ticketData = [_ember['default'].Object.create({ 'title': 'centralized', 'discription': 'trending algorithm', 'status': 'open', 'reporter': 'Grant' }), _ember['default'].Object.create({ 'title': 'Decentralized', 'discription': 'Advanced upward-trending algorithm', 'status': 'close', 'reporter': 'Benton Grant' })];\n\n    this.set('ticket', ticketData);\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 39\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'display-tickets/items', [], ['ticket', ['subexpr', '@mut', [['get', 'ticket', ['loc', [null, [1, 31], [1, 37]]], 0, 0, 0, 0]], [], [], 0, 0]], ['loc', [null, [1, 0], [1, 39]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var spans = this.$('span');\n\n    assert.equal(spans.hasClass('label'), true);\n  });\n});","define('client/tests/integration/pods/components/display-tickets/items/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/display-tickets/items/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/display-tickets/items/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/login-form/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('login-form', 'Integration | Component | login form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 14\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'login-form', ['loc', [null, [1, 0], [1, 14]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var buttons = this.$('button');\n    var labels = this.$('label');\n\n    assert.equal(buttons.text().trim(), 'Login');\n    assert.equal(labels.text().trim(), 'EmailPassword');\n  });\n});","define('client/tests/integration/pods/components/login-form/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/login-form/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/login-form/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/status-field/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('status-field', 'Integration | Component | status field', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'status-field', ['loc', [null, [1, 0], [1, 16]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'Please select');\n  });\n});","define('client/tests/integration/pods/components/status-field/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/status-field/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/status-field/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/user-profile/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-profile', 'Integration | Component | user profile', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'user-profile', ['loc', [null, [1, 0], [1, 16]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var divs = this.$('div span');\n\n    assert.equal(divs.text().trim(), 'Welcome');\n  });\n});","define('client/tests/integration/pods/components/user-profile/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/user-profile/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/user-profile/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/user-row/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-row', 'Integration | Component | user row', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'user-row', ['loc', [null, [1, 0], [1, 12]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'user-row', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('client/tests/integration/pods/components/user-row/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/user-row/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/user-row/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/user-select/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-select', 'Integration | Component | user select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'user-select', ['loc', [null, [1, 0], [1, 15]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'Please select');\n  });\n});","define('client/tests/integration/pods/components/user-select/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/user-select/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/user-select/component-test.js should pass jshint.');\n  });\n});","define('client/tests/mixins/set-role.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/set-role.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/set-role.js should pass jshint.');\n  });\n});","define('client/tests/mixins/validation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/validation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/validation.js should pass jshint.');\n  });\n});","define('client/tests/models/assignee.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/assignee.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/assignee.js should pass jshint.');\n  });\n});","define('client/tests/models/assignor.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/assignor.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/assignor.js should pass jshint.');\n  });\n});","define('client/tests/models/reporter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/reporter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/reporter.js should pass jshint.');\n  });\n});","define('client/tests/models/ticket.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/ticket.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ticket.js should pass jshint.');\n  });\n});","define('client/tests/models/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/add-ticket/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/add-ticket/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/add-ticket/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/display-tickets/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/display-tickets/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/display-tickets/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/display-tickets/items/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/display-tickets/items/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/display-tickets/items/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/login-form/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/login-form/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/login-form/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/user-profile/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/user-profile/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/user-profile/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/user-row/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/user-row/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/user-row/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/user-select/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/user-select/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/user-select/component.js should pass jshint.');\n  });\n});","define('client/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('client/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('client/tests/routes/admin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin.js should pass jshint.');\n  });\n});","define('client/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('client/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('client/tests/routes/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('client/tests/routes/tickets.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tickets.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tickets.js should pass jshint.');\n  });\n});","define('client/tests/routes/tickets/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tickets/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tickets/edit.js should pass jshint.');\n  });\n});","define('client/tests/routes/tickets/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tickets/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tickets/index.js should pass jshint.');\n  });\n});","define('client/tests/routes/tickets/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tickets/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tickets/new.js should pass jshint.');\n  });\n});","define('client/tests/routes/tickets/show.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tickets/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tickets/show.js should pass jshint.');\n  });\n});","define('client/tests/routes/users.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users.js should pass jshint.');\n  });\n});","define('client/tests/routes/users/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/edit.js should pass jshint.');\n  });\n});","define('client/tests/routes/users/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/index.js should pass jshint.');\n  });\n});","define('client/tests/routes/users/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/new.js should pass jshint.');\n  });\n});","define('client/tests/routes/users/show.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/show.js should pass jshint.');\n  });\n});","define('client/tests/routes/users/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/user.js should pass jshint.');\n  });\n});","define('client/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('client/tests/services/ajax.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/ajax.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/ajax.js should pass jshint.');\n  });\n});","define('client/tests/services/session-account.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/session-account.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/session-account.js should pass jshint.');\n  });\n});","define('client/tests/test-helper', ['exports', 'client/tests/helpers/resolver', 'ember-qunit'], function (exports, _clientTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_clientTestsHelpersResolver['default']);\n});","define('client/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('client/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('client/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/mixins/set-role-test', ['exports', 'ember', 'client/mixins/set-role', 'qunit'], function (exports, _ember, _clientMixinsSetRole, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | set role');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var SetRoleObject = _ember['default'].Object.extend(_clientMixinsSetRole['default']);\n    var subject = SetRoleObject.create();\n    assert.ok(subject);\n  });\n});","define('client/tests/unit/mixins/set-role-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/mixins/set-role-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/set-role-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/ticket-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('ticket', 'Unit | Model | ticket', {\n    // Specify the other units that are required for this test.\n    needs: ['model:reporter', 'model:assignee', 'model:assignor']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/ticket-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/ticket-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/ticket-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/user-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfile":"tests.js"}